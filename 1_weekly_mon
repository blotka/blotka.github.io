###################
rm(list=ls())
#####################
# con = gzcon(file('C:/_gielda_/sit_old.gz', 'rb'))
# setwd("C:/_gielda_")
# source(con)
# close(con)
options(warn=-1)
setwd("C:/_gielda_")
source("C:/_gielda_/code.ef.R")
#*****************************************************************
# Load historical data
#******************************************************************
load.packages('quantmod')
require(downloader)
require(PerformanceAnalytics)

tickers<-spl("SPXL,TQQQ,TMF,EDV,SPY,QQQ,TLT,SHV") #,XIV,ZIV") # ,SHY,SHV")

data <- new.env()
getSymbols(tickers, src = 'yahoo', from = '2014-01-01', env = data, auto.assign = T)
for(i in ls(data)) data[[i]] = adjustOHLC(data[[i]], use.Adjusted=T)  						

# current quotes logic
quotes = getQuote(tickers)
for(i in ls(data))
  if( last(index(data[[i]])) < as.Date(quotes[i, 'Trade Time']) ) {
    data[[i]] = rbind( data[[i]], make.xts(quotes[i, spl('Open,High,Low,Last,Volume,Last')],
                                           as.Date(quotes[i, 'Trade Time'])))
  }

bt.prep(data, align='keep.all', dates='2014:08::') # '2009:11::'

# look at the data
last(data$prices, 5)

#*****************************************************************
# Create Efficient Frontier
#******************************************************************    
# create sample historical input assumptions
ia = aa.test.create.ia()

# create long-only, fully invested efficient frontier
n = ia$n       

# 0 <= x.i <= 1
constraints = new.constraints(n, lb = 0, ub = 1)
constraints = add.constraints(diag(n), type='>=', b=0, constraints)
constraints = add.constraints(diag(n), type='<=', b=1, constraints)

# SUM x.i = 1
constraints = add.constraints(rep(1, n), 1, type = '=', constraints)       

# create efficient frontier
ef = portopt(ia, constraints, 50, 'Efficient Frontier')

#*****************************************************************
# Create Plot
#******************************************************************    
# plot efficient frontier
plot.new()
par(mar=c(1,1,1,1))
plot.ef(ia, list(ef), transition.map=F) 

# find maximum sharpe portfolio
max(portfolio.return(ef$weight,ia) /  portfolio.risk(ef$weight,ia))

# plot minimum variance portfolio
weight = min.var.portfolio(ia,constraints) 
points(100 * portfolio.risk(weight,ia), 100 * portfolio.return(weight,ia), pch=15, col='red')
portfolio.return(weight,ia) /  portfolio.risk(weight,ia)

# plot maximum Sharpe or tangency portfolio
weight_MS = max.sharpe.portfolio()(ia,constraints)
points(100 * portfolio.risk(weight_MS,ia), 100 * portfolio.return(weight_MS,ia), pch=15, col='orange')
portfolio.return(weight_MS,ia) /  portfolio.risk(weight_MS,ia)

# plot minimum correlation or tangency portfolio
# weight_MC = min.corr.portfolio()(ia,constraints)
# points(100 * portfolio.risk(weight_MC,ia), 100 * portfolio.return(weight_MC,ia), pch=15, col='orange')
# portfolio.return(weight_MC,ia) /  portfolio.risk(weight_MC,ia)

# plota.legend('Minimum Variance,Maximum Sharpe,Minimum Correlation','red,orange', x='topright')
#*****************************************************************
# Examples of Maximum Sharpe or Tangency portfolios construction
#******************************************************************    
weight_MS = max.sharpe.portfolio('long-only')(ia,constraints) 
round(weight_MS,2)
round(c(sum(weight_MS[weight<0]), sum(weight_MS[weight>0])),2)

# weight_MC = min.corr.portfolio('long-only')(ia,constraints) 
# round(weight_MC,2)
# round(c(sum(weight_MC[weight<0]), sum(weight_MC[weight>0])),2)

#*****************************************************************
# Code Strategies
#******************************************************************
prices = data$prices 
n = ncol(prices)

models = list()

#*****************************************************************
# Code Strategies
#******************************************************************
# find period ends
period <- 'weeks'
period.ends = endpoints(prices, period) # 'weeks' or 'months'
period.ends = period.ends[period.ends > 0]

n.mom =   1 #  1!!!
n.vol =  10 # 10!!!
# mom/vol sets: 80/20; 10/10; 5/10 - for MS; 2/10 - for EW
n.top =   4       
momentum = prices / mlag(prices, n.mom) 

obj = portfolio.allocation.helper(data$prices, period.ends=period.ends,
                                  lookback.len = n.vol, universe = ntop(momentum[period.ends,], n.top) > 0,
                                  min.risk.fns = list(EW=equal.weight.portfolio,
#                                                     RP=risk.parity.portfolio,
#                                                     MV=min.var.portfolio,
#                                                     MD=max.div.portfolio,
#                                                     MC=min.corr.portfolio,
#                                                     MC2=min.corr2.portfolio,
#                                                     MCE=min.corr.excel.portfolio,
                                                     MS=max.sharpe.portfolio())
)

models = create.strategies(obj, data)$models
options(warn=0)
#*****************************************************************
# Create Report
#******************************************************************  
plot.new()
par(mar=c(1,1,1,1))
strategy.performance.snapshoot(models, T)
#models <- bt.run(data, type='share',dates='2014:10::2015',trade.summary = T)
plotbt.custom.report.part2(models$EW)
plotbt.custom.report.part2(models$MS)
plotbt.custom.report.part3(models, trade.summary = T)
# Plot Portfolio Turnover for each strategy
layout(1)
#barplot.with.labels(sapply(models, compute.turnover, data), 'Average Annual Portfolio Turnover')
trade_MS = bt.trade.summary(data,models$MS)
trade_EW = bt.trade.summary(data,models$EW)
REPORT_MS <- round(models$MS$period,4)
weight_EW <- max.sharpe.portfolio()(ia,constraints)
weight_EW <- round(weight_EW,4)
report_EW <- cbind(tickers,weight_EW)
weight_MS <- max.sharpe.portfolio()(ia,constraints)
weight_MS <- round(weight_MS,4)
report_MS <- cbind(tickers,weight_MS)
#############
REPORT_EW <- round(models$EW$period,4)
# weight_MC <- min.corr.portfolio()(ia,constraints)
# weight_MC <- round(weight_MC,4)
# report_MC <- cbind(tickers,weight_MC)
# report_MC
report_EW
REPORT_EW
trade_EW
############
report_MS
REPORT_MS
trade_MS
############
cumtest_MS <- cumsum(models$MS$ret)
tail(cumtest_MS, 5)
test_MS <- models$MS$ret
charts.PerformanceSummary(test_MS)

test_MS[is.na(test_MS)] <- 0
plot(log(cumprod(1+test_MS)), legend.loc="topleft")

diff_MS <- test_MS[,1]
charts.PerformanceSummary(diff_MS, main="relative performance")

rbind(table.AnnualizedReturns(test_MS), maxDrawdown(test_MS))

dd_MS <- table.Drawdowns(test_MS[,1], top=100)
dd_MS <- dd_MS[dd_MS$Depth < -.10,]
dd_MS
sum(dd_MS$"To Trough")/nrow(test_MS)

tmp_MS <- rbind(table.AnnualizedReturns(diff_MS), maxDrawdown(diff_MS))
rownames(tmp_MS)[4] <- "Worst Drawdown"
tmp_MS
#####################
# plot.new()
# par(mar=c(1,1,1,1))
# plotbt.custom.report.part1(models$EW)
# plotbt.custom.report.part2(models$EW)
# 
# plotbt.strategy.sidebyside(models$EW)
# plot.new()
# par(mar=c(1,1,1,1))
# plotbt.custom.report.part1(models$MS)
# plotbt.custom.report.part2(models$MS)
# 
# plotbt.strategy.sidebyside(models$MS)
# strategy.performance.snapshoot(models, T)
last(data$prices, 2)
